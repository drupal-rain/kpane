<?php
/**
 * @file
 * Code for the Kpane feature.
 */

include_once 'kpane.features.inc';

// =============================================================================
// Plugin

/**
 *  Implements hook_ctools_plugin_type().
 */
function kpane_ctools_plugin_type() {
  return array(
    'kpane' => array(
      'load themes' => TRUE,
    ),
  );
}

/**
 *  Implements hook_ctools_plugin_directory().
 */
function kpane_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'kpane') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Wrapper for ctools_get_plugins().
 */
function kpane_kpane_get_plugins($id = NULL) {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('kpane', 'kpane', $id);

  return $plugins;
}

/**
 * Get optional callback function of plugin.
 */
function kpane_kpane_get_function($id, $callback) {
  ctools_include('plugins');
  $function = ctools_plugin_load_function('kpane', 'kpane', $id, $callback);
  if (!$function) {
    $plugin = ctools_get_plugins('kpane', 'kpane', $id);
    $function_tmp = $plugin['module'] . '_kpane_' . $id . '_' . str_replace(' ', '_', $callback);
    if (function_exists($function_tmp)) {
      $function = $function_tmp;
    }
  }

  return $function;
}

// =============================================================================
//

/**
 *  Implements hook_entity_info_alter().
 */
function kpane_entity_info_alter(&$entity_info) {
  $plugins = kpane_kpane_get_plugins();
  foreach ($plugins as $id => $plugin) {
    $callback = kpane_kpane_get_function($id, 'bundle info');
    $entity_info['fieldable_panels_pane']['bundles'][$id] = $callback();
  }
}

/**
 * Implements hook_theme().
 */
function kpane_theme($existing, $type, $theme, $path) {
  $registry['panels_pane__fieldable_panels_pane'] = array (
    'base hook' => 'panels_pane',
    'variables' => array('output' => array(), 'pane' => array(), 'display' => array()),
    'path' => drupal_get_path('module', 'kpane') . '/templates',
    'template' => 'panels-pane--fieldable-panels-pane',
  );

  // Give registry in order to provide templates in module level.
  $panes = array('pane_heading', 'pane_dividend', 'pane_feature');
  foreach ($panes as $pane) {
    $registry['fieldable_panels_pane__' . $pane] = array (
      'base hook' => 'fieldable_panels_pane',
      'render element' => 'elements',
      'path' => drupal_get_path('module', 'kpane') . '/templates',
      'template' => 'fieldable-panels-pane--' . str_replace('_', '-', $pane),
    );
  }

  $plugins = kpane_kpane_get_plugins();
  foreach ($plugins as $id => $plugin) {
    $callback = kpane_kpane_get_function($id, 'theme registry');
    $registry += $callback($existing, $type, $theme, $path);
  }

  return $registry;
}

/**
 *  Implements hook_preprocess_HOOK().
 */
function kpane_preprocess_panels_pane(&$vars) {
  if ($vars['pane']->type == 'fieldable_panels_pane') {
    $fieldable_panels_pane = $vars['content']['#fieldable_panels_pane'];
    $vars['theme_hook_suggestions'][] = 'panels_pane__fieldable_panels_pane__' . $fieldable_panels_pane->bundle;
  }
}

/**
 *  Implements hook_preprocess_HOOK().
 */
// @todo Study the preprocess() and process() jobs done by core modules.
function kpane_preprocess_fieldable_panels_pane(&$vars) {
  //dsm($vars);
  $entity = $vars['elements']['#fieldable_panels_pane'];
  // CSS Classes
  // Settings: Use default CSS classes.
  if (!$entity->settings['pane_classes_default']) {
    foreach ($vars['classes_array'] as $key => $css_class) {
      if ($css_class == 'fieldable-panels-pane') {
        unset($vars['classes_array'][$key]);
      }
    }
  }
  else {
    $vars['classes_array'][] = $entity->bundle;
  }
  // Settings: Add CSS classes.
  if (!empty($entity->settings['pane_classes_to_add'])) {
    $vars['classes_array'][] = check_plain($entity->settings['pane_classes_to_add']);
  }

  // Title
  $vars['title'] = $entity->title;
  if ($entity->link) {
    $vars['title'] = l($vars['title'], $entity->path);
  }

  // pane_dividend
  if ($entity->bundle == 'pane_dividend') {
    $vars['classes_array'][] = 'clearfix';
    $vars['attributes_array']['title'] = $entity->title;
  }
  // pane_heading
  /*
  if ($entity->bundle == 'pane_heading') {
    $vars['tag'] = 'h' . $entity->field_pane_heading_tag['und'][0]['value'];
  }
  */
  // pane_feature
  if ($entity->bundle == 'pane_feature') {
    //dsm($vars);
  }

}

function kpane_process_fieldable_panels_pane(&$vars) {
  //dsm($vars);
}

function kpane_fieldable_panels_panes_entity_settings_form_alter(&$form, &$form_state) {
  $entity = $form_state['entity'];
  $form['settings']['pane_classes_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use default CSS classes'),
    '#default_value' => $entity->settings['pane_classes_default'],
  );
  $form['settings']['pane_classes_to_add'] = array(
    '#type' => 'textfield',
    '#title' => t('Add CSS classes'),
    '#default_value' => $entity->settings['pane_classes_to_add'],
  );
  // No revision by default.
  $form['revision']['revision']['#default_value'] = FALSE;
}
