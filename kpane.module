<?php
/**
 * @file
 * Code for the Kpane feature.
 */

define('KPANE_ENTITY', 'fieldable_panels_pane');

include_once 'kpane.features.inc';

// =============================================================================
// Plugin

/**
 *  Implements hook_ctools_plugin_type().
 */
function kpane_ctools_plugin_type() {
  return array(
    'kpane' => array(
      'load themes' => TRUE,
    ),
  );
}

/**
 *  Implements hook_ctools_plugin_directory().
 */
function kpane_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'kpane') {
    return 'plugins/' . $plugin_type;
  }
  if ($owner == 'panels') {
    return 'panels/' . $plugin_type;
  }
}

/**
 * Wrapper for ctools_get_plugins() to get kpane plugins.
 */
function kpane_plugin_get_plugins($id = NULL) {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('kpane', 'kpane', $id);

  return $plugins;
}

/**
 * Get optional callback function of plugin.
 */
function kpane_plugin_get_function($id, $callback) {
  ctools_include('plugins');
  $function = ctools_plugin_load_function('kpane', 'kpane', $id, $callback);
  // Allow to use default name of callback: MODULE_kpane_PLUGIN_CALLBACK().
  if (!$function) {
    $plugin = ctools_get_plugins('kpane', 'kpane', $id);
    $function_tmp = $plugin['module'] . '_kpane_' . $id . '_' . str_replace(' ', '_', $callback);
    if (function_exists($function_tmp)) {
      $function = $function_tmp;
    }
  }

  return $function;
}

/**
 * Attach css, js, etc.
 */
// @todo Finish the design and work.
function kpane_plugin_attach($id) {
  $plugin = kpane_plugin_get_plugins($id);
  // @todo Support other input format?
  if (isset($plugin['css'])) {
    drupal_add_css($plugin['path'] . '/' . $plugin['css']);
  }
  if (isset($plugin['js'])) {
    drupal_add_js($plugin['path'] . '/' . $plugin['js']);
  }
}

// -----------------------------------------------------------------------------
// Helper Functions for Plugin

/**
 * Helper function for plugin.
 */
function _kpane_plugin_bundle_info($id) {
  return array(
    'label' => ucfirst($id),
    'pane category' => t('Kpane'),
    'pane top level' => FALSE, // set to true to make this show as a top level icon
    //'pane icon' => '/path/to/custom/icon/for/this/pane.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_pane_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/' . $id,
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
}

/**
 * Helper function for plugin.
 */
function _kpane_plugin_theme_registry($id) {
  $plugin = kpane_plugin_get_plugins($id);
  $registry = array();
  $registry['fieldable_panels_pane__' . $id] = array (
    'base hook' => 'fieldable_panels_pane',
    'render element' => 'elements',
    'path' => $plugin['path'],
    'template' => $id,
  );

  return $registry;
}

// =============================================================================
// Hook

/**
 * Implements hook_menu().
 */
function kpane_menu() {

  $items['admin/structure/fieldable-panels-panes/manage/%/reset'] = array(
    'title' => 'Reset',
    'description' => 'Reset the kpane.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kpane_kpane_reset_form', 4),
    'access arguments' => array('administer fieldable panels panes'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );

  return $items;
}

/**
 *  Implements hook_entity_info_alter().
 */
function kpane_entity_info_alter(&$entity_info) {
  $plugins = kpane_plugin_get_plugins();
  foreach ($plugins as $id => $plugin) {
    $callback = kpane_plugin_get_function($id, 'bundle info');
    if ($callback) {
      $entity_info['fieldable_panels_pane']['bundles'][$id] = $callback();
    }
  }
}

/**
 * Implements hook_theme().
 */
function kpane_theme($existing, $type, $theme, $path) {
  $registry['panels_pane__fieldable_panels_pane'] = array (
    'base hook' => 'panels_pane',
    'variables' => array('output' => array(), 'pane' => array(), 'display' => array()),
    'path' => drupal_get_path('module', 'kpane') . '/templates',
    'template' => 'panels-pane--fieldable-panels-pane',
  );

  // Give registry in order to provide templates in module level.
  /*
  $panes = array('pane_heading', 'pane_dividend', 'pane_feature');
  foreach ($panes as $pane) {
    $registry['fieldable_panels_pane__' . $pane] = array (
      'base hook' => 'fieldable_panels_pane',
      'render element' => 'elements',
      'path' => drupal_get_path('module', 'kpane') . '/templates',
      'template' => 'fieldable-panels-pane--' . str_replace('_', '-', $pane),
    );
  }
  */

  // Plugins Theme Registry
  // Allow to add more than on item to the registry.
  // Then in template preprocess, it could use settings information to add theme hook suggestion.
  $plugins = kpane_plugin_get_plugins();
  foreach ($plugins as $id => $plugin) {
    $callback = kpane_plugin_get_function($id, 'theme registry');
    if ($callback) {
      $registry += $callback($existing, $type, $theme, $path);
    }
  }

  return $registry;
}

/**
 *  Implements hook_preprocess_HOOK().
 */
function kpane_preprocess_panels_pane(&$vars) {
  if ($vars['pane']->type == 'fieldable_panels_pane') {
    $fieldable_panels_pane = $vars['content']['#fieldable_panels_pane'];
    $vars['theme_hook_suggestions'][] = 'panels_pane__fieldable_panels_pane__' . $fieldable_panels_pane->bundle;
  }
}

/**
 *  Implements hook_preprocess_HOOK().
 */
// @todo Study the preprocess() and process() jobs done by core modules.
function kpane_preprocess_fieldable_panels_pane(&$vars) {
  //dsm($vars);
  $entity = $vars['elements']['#fieldable_panels_pane'];
  // CSS Classes
  // Settings: Use entity CSS class.
  if (!$entity->settings['css']['entity_class']) {
    foreach ($vars['classes_array'] as $key => $css_class) {
      if ($css_class == 'fieldable-panels-pane') {
        unset($vars['classes_array'][$key]);
      }
    }
  }
  // Settings: Use bundle CSS class.
  if ($entity->settings['css']['bundle_class']) {
    $vars['classes_array'][] = $entity->bundle;
  }
  // Settings: Add CSS classes.
  if (!empty($entity->settings['css']['classes'])) {
    $vars['classes_array'][] = check_plain($entity->settings['css']['classes']);
  }

  // Title
  $vars['title'] = $entity->title;
  if ($entity->link) {
    $vars['title'] = l($vars['title'], $entity->path);
  }

  // Plugin Callback: 'template preprocess'
  $callback = kpane_plugin_get_function($entity->bundle, 'template preprocess');
  if ($callback) {
    $callback($vars, $entity);
  }

  // Plugin Attach
  // Simple attach files, for complex attach, use 'template preprocess' to achieve
  kpane_plugin_attach($entity->bundle);

}

/**
 *  Implements hook_process_HOOK().
 */
function kpane_process_fieldable_panels_pane(&$vars) {
  //dsm($vars);
  $entity = $vars['elements']['#fieldable_panels_pane'];
  // Plugin Template Process
  $callback = kpane_plugin_get_function($entity->bundle, 'template preprocess');
  if ($callback) {
    $callback($vars, $entity);
  }
}

/**
 * Implements hook_fieldable_panels_panes_entity_settings_form_alter().
 */
function kpane_fieldable_panels_panes_entity_settings_form_alter(&$form, &$form_state) {
  $entity = $form_state['entity'];
  // No revision by default.
  $form['revision']['revision']['#default_value'] = FALSE;
  // Global Settings
  // CSS
  $form['settings']['css'] = array(
    '#type' => 'fieldset',
    '#title' => t('CSS'),
    '#collapsible' => TRUE,
  );
  $form['settings']['css']['entity_class'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use entity CSS class'),
    '#default_value' => $entity->settings['css']['entity_class'],
  );
  $form['settings']['css']['bundle_class'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use bundle CSS class'),
    '#default_value' => isset($entity->settings['css']['bundle_class']) ? $entity->settings['css']['bundle_class'] : TRUE,
  );
  $form['settings']['css']['classes'] = array(
    '#type' => 'textfield',
    '#title' => t('Add CSS classes'),
    '#default_value' => $entity->settings['css']['classes'],
  );

  // Plugin Settings
  $id = $entity->bundle;
  $callback = kpane_plugin_get_function($id, 'settings form');
  if ($callback) {
    $form['settings'][$id] = array(
      '#type' => 'fieldset',
      '#title' => t('@id Settings', array('@id' => $id)),
      '#collapsible' => TRUE,
    );
    $form['settings'][$id] += $callback($form, $form_state, $entity);
  }

}

// =============================================================================
// Callbacks, Helpers, Utility

/**
 *
 */
function kpane_kpane_reset_form($form, &$form_state, $kpane_bundle) {
  $question = t('Are you sure to reset he @kpane_bundle.', array('@kpane_bundle' => $kpane_bundle));
  $path = 'admin/structure/fieldable-panels-panes/manage/' . $kpane_bundle;
  $form_state['kpane_bundle'] = $kpane_bundle;

  return confirm_form($form, $question, $path);
}

function kpane_kpane_reset_form_submit($form, &$form_state) {
  $kpane_bundle = $form_state['kpane_bundle'];
  if ($form_state['values']['confirm']) {
    $callback = kpane_plugin_get_function($kpane_bundle, 'reset');
    if ($callback) {
      $callback();
      drupal_set_message(t('@kpane_bundle is reset.', array('@kpane_bundle' => $kpane_bundle)));
    }
    else {
      drupal_set_message(t('Reset callback for @kpane_bundle does not exist.', array('@kpane_bundle' => $kpane_bundle)), 'warning');
    }
  }
  $form_state['redirect'] = 'admin/structure/fieldable-panels-panes/manage/' . $kpane_bundle;
}

// -----------------------------------------------------------------------------
// Helper

// Helper function to simplify default value setting in array.
function kpane_settings_default_value($entity, $param, $default_value) {
  $bundle = $entity->bundle;
  return isset($entity->settings[$bundle][$param]) ? $entity->settings[$bundle][$param] : $default_value;
}

// Hide title in display.
function kpane_hide_title($bundle, $view_mode = 'default') {
  $field_bundle_settings = field_bundle_settings(KPANE_ENTITY, $bundle);
  $field_bundle_settings['extra_fields']['display']['title'][$view_mode]['visible'] = FALSE;
  field_bundle_settings(KPANE_ENTITY, $bundle, $field_bundle_settings);
}

// Common setting form for picture field.
// Suitable for multiple picture fields in one entity.
function kpane_picture_settings_form($entity, $field_name, $id) {
  $form = array();

  $bundle = $entity->bundle;
  $base = field_info_field($field_name);
  $instance = field_info_instance(KPANE_ENTITY, $field_name, $bundle);
  $settings = kpane_settings_default_value($entity, $id, array(
    'link' => FALSE,
    'url' => '',
  ));
  $settings += field_info_formatter_settings('picture');
  $form[$id] = array(
    '#type' => 'fieldset',
    '#title' => ucfirst($id),
    '#collapsible' => TRUE,
  );
  $form[$id] += picture_field_formatter_settings_picture_form($base, $instance, $settings);
  $form[$id]['link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Set as Link'),
    '#default_value' => $settings['link'],
  );
  $form[$id]['url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#default_value' => $settings['url'],
    '#states' => array(
      'visible' => array(
        ':input[name="' . "settings[$bundle][$id][link]" . '"]' => array('checked' => TRUE),
      ),
    ),
  );

  return $form[$id];
}

// Common display for image in picture format.
function kpane_picture_template_variable($entity, $field_name, $id) {
  $settings = $entity->settings[$entity->bundle][$id] + field_info_formatter_settings('picture');
  $picture = field_view_value(KPANE_ENTITY, $entity, $field_name, $entity->{$field_name}[$entity->language][0],
    array(
      'label' => 'hidden',
      'type' => 'picture',
      'settings' => $settings,
    )
  );
  $picture_html = render($picture);
  $output = $picture_html;
  if ($settings['link']) {
    $options = array(
      'attributes' => array(),
      'html' => TRUE,
    );
    $output = l($picture_html, $settings['url'], $options);
  }

  return $output;
}