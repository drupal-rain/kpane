<?php
/**
 * @file
 * Code for the Kpane feature.
 */

define('KPANE_ENTITY', 'fieldable_panels_pane');

include_once 'kpane.features.inc';

/**
 * Wrapper for ctools_include().
 */
function kpane_include($file, $dir = 'includes') {
  ctools_include($file, 'kpane', $dir);
}

// =============================================================================
// Plugin

/**
 *  Implements hook_ctools_plugin_type().
 */
function kpane_ctools_plugin_type() {
  return array(
    'kpane' => array(
      'load themes' => TRUE,
    ),
  );
}

/**
 *  Implements hook_ctools_plugin_directory().
 */
function kpane_ctools_plugin_directory($owner, $plugin_type) {
  if (in_array($owner, array('kore', 'kpane'))) {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Wrapper for ctools_get_plugins() to get kpane plugins.
 */
function kpane_plugin_get_plugins($id = NULL) {
  $plugins = &drupal_static(__FUNCTION__, array());

  if (empty($plugins)) {
    ctools_include('plugins');
    $plugins = ctools_get_plugins('kpane', 'kpane');
    foreach ($plugins as $plugin_id => $info) {
      $hook = 'kpane_' . $plugin_id . '_info';
      drupal_alter($hook, $plugins[$plugin_id]);
    }
  }

  if (isset($id)) {
    return $plugins[$id];
  }
  return $plugins;
}

/**
 * Get optional callback function of plugin.
 */
function kpane_plugin_get_function($id, $callback) {
  ctools_include('plugins');
  $function = ctools_plugin_load_function('kpane', 'kpane', $id, $callback);
  // Allow to use default name of callback: MODULE_kpane_PLUGIN_CALLBACK().
  if (!$function) {
    $plugin = ctools_get_plugins('kpane', 'kpane', $id);
    $function_tmp = $plugin['module'] . '_kpane_' . $id . '_' . str_replace(' ', '_', $callback);
    if (function_exists($function_tmp)) {
      $function = $function_tmp;
    }
  }

  return $function;
}

function kpane_plugin_theme_display_options($plugin) {
  $displays = array();
  if (isset($plugin['display'])) {
    foreach($plugin['display'] as $name => $display) {
      $displays[$name] = $display['label'];
    }
  }

  return array(
    'none' => t('-- None --'),
  ) + $displays;
}

function kpane_plugin_theme_style_options($plugin, $display = '') {
  $styles = array();
  if (!empty($display)) {
    if (isset($plugin['display'][$display]['style'])) {
      foreach ($plugin['display'][$display]['style'] as $name => $style) {
        $styles[$name] = $style['label'];
      }
    }
  }

  return array(
    'none' => t('-- None --'),
  ) + $styles;
}

/**
 * Ajax callback for settings[theme][display], to replace the style options.
 */
function kpane_plugin_settings_theme_display_ajax($form, $form_state) {
  $entity = $form_state['entity'];
  $plugin = kpane_plugin_get_plugins($entity->bundle);
  $form['settings']['theme']['style']['#options'] = kpane_plugin_theme_style_options($plugin, $form_state['values']['settings']['theme']['display']);
  $form['settings']['theme']['style']['#default_value'] = 'none';

  return $form['settings']['theme']['style'];
}

/**
 * Attach css, js, etc.
 */
// @todo Finish the design and work.
function kpane_plugin_attach($id) {
  $plugin = kpane_plugin_get_plugins($id);
  // @todo Support other input format?
  if (isset($plugin['css'])) {
    drupal_add_css($plugin['path'] . '/' . $plugin['css']);
  }
  if (isset($plugin['js'])) {
    drupal_add_js($plugin['path'] . '/' . $plugin['js']);
  }
}

// -----------------------------------------------------------------------------
// Helper Functions for Plugin

/**
 * Helper function for plugin.
 */
function _kpane_plugin_bundle_info($id) {
  return array(
    'label' => ucfirst($id),
    'pane category' => t('Kpane'),
    'pane top level' => FALSE, // set to true to make this show as a top level icon
    //'pane icon' => '/path/to/custom/icon/for/this/pane.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_pane_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/' . $id,
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
}

/**
 * Helper function for plugin.
 */
function _kpane_plugin_theme_registry($id, $theme_display = TRUE, $theme_style = TRUE) {
  $plugin = kpane_plugin_get_plugins($id);
  $registry = array();

  // New style
  $registry_id = 'kpane_' . $id;
  $registry[$registry_id] = array(
    //'base hook' => 'fieldable_panels_pane',
    //'pattern' => $registry_id . '__',
    'render element' => 'elements',
    'path' => $plugin['path'],
    'template' => $id,
  );
  // Display, Style
  // @todo I could allow additional settings like 'path'(within display, style) to give convenient to module when alter the plugin info.
  if ($theme_display && isset($plugin['display'])) {
    foreach ($plugin['display'] as $display_name => $display) {
      $template = $id . '_' . $display_name;
      $registry_id = 'kpane_' . $template;
      $registry[$registry_id] = array(
        //'base hook' => 'fieldable_panels_pane',
        //'pattern' => $registry_id . '__',
        'render element' => 'elements',
        'path' => isset($plugin['display'][$display_name]['path']) ? $plugin['display'][$display_name]['path'] : $plugin['path'],
        'template' => str_replace('_', '-', $template),
      );
      if ($theme_style && isset($plugin['display'][$display_name]['style'])) {
        foreach ($plugin['display'][$display_name]['style'] as $style_name => $style) {
          $template = $id . '_' . $display_name . '_' . $style_name;
          $registry_id = 'kpane_' . $template;
          $registry[$registry_id] = array(
            //'base hook' => 'fieldable_panels_pane',
            //'pattern' => $registry_id . '__',
            'render element' => 'elements',
            'path' => isset($plugin['display'][$display_name]['style'][$style_name]['path']) ? $plugin['display'][$display_name]['style'][$style_name]['path'] : $plugin['path'],
            'template' => str_replace('_', '-', $template),
          );
        }
      }
    }
  }

  return $registry;
}

/**
 * Settings form helper for kpane plugin.
 */
function _kpane_plugin_settings_form(&$form, &$form_state, $context) {
  $id = $context->bundle;
  $plugin = kpane_plugin_get_plugins($id);
  foreach ($plugin['display'] as $display_name => $display) {
    $form[$display_name] = array(
      '#type' => 'fieldset',
      '#title' => $display['label'],
      '#collapsible' => TRUE,
      '#states' => array(
        'visible' => array(
          ':input[name="settings[theme][display]"]' => array('value' => $display_name),
        ),
      ),
    );

    $function = "kpane_kpane_{$id}_settings_form_" . $display_name;
    if (function_exists($function)) {
      $function($form, $form_state, $context);
    }
  }
}

// =============================================================================
// Hook

/**
 * Implements hook_menu().
 */
function kpane_menu() {

  $items['admin/structure/fieldable-panels-panes/manage/%/reset'] = array(
    'title' => 'Reset',
    'description' => 'Reset the kpane.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kpane_plugin_reset_form', 4),
    'access arguments' => array('administer fieldable panels panes'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );

  return $items;
}

/**
 *  Implements hook_entity_info_alter().
 */
function kpane_entity_info_alter(&$entity_info) {
  $plugins = kpane_plugin_get_plugins();
  foreach ($plugins as $id => $plugin) {
    $callback = kpane_plugin_get_function($id, 'bundle info');
    if ($callback) {
      $entity_info['fieldable_panels_pane']['bundles'][$id] = $callback();
    }
    else {
      $entity_info['fieldable_panels_pane']['bundles'][$id] = _kpane_plugin_bundle_info($id);
    }
  }
}

// =============================================================================
// Theme

/**
 * Implements hook_theme().
 */
function kpane_theme($existing, $type, $theme, $path) {
  // While 'panels_pane' wrap 'fieldable_panels_pane', we provide an override one.
  // @forget if fieldable_panels_panes add it???
  $registry['panels_pane__fieldable_panels_pane'] = array (
    'base hook' => 'panels_pane',
    'variables' => array('output' => array(), 'pane' => array(), 'display' => array()),
    'path' => drupal_get_path('module', 'kpane') . '/templates',
    'template' => 'panels-pane--fieldable-panels-pane',
  );

  // Plugins Theme Registry
  // Allow to add more than on item to the registry.
  // Then in template preprocess, it could use settings information to add theme hook suggestion.
  $plugins = kpane_plugin_get_plugins();
  foreach ($plugins as $id => $plugin) {
    $callback = kpane_plugin_get_function($id, 'theme registry');
    if ($callback) {
      $registry += $callback($existing, $type, $theme, $path);
    }
    else {
      $registry += _kpane_plugin_theme_registry($id);
    }
  }

  return $registry;
}

/**
 *  Implements hook_preprocess_HOOK().
 */
function kpane_preprocess_panels_pane(&$vars) {
  if ($vars['pane']->type == 'fieldable_panels_pane') {
    $fieldable_panels_pane = $vars['content']['#fieldable_panels_pane'];
    $vars['theme_hook_suggestions'][] = 'panels_pane__fieldable_panels_pane__' . $fieldable_panels_pane->bundle;
  }
}

/**
 *  Implements hook_preprocess_HOOK().
 */
// @todo Study the preprocess() and process() jobs done by core modules.
function kpane_preprocess_fieldable_panels_pane(&$vars) {
  //dsm($vars);
  $entity = $vars['elements']['#fieldable_panels_pane'];
  $settings = $entity->settings;

  // Delegate to kpane system
  $template = 'kpane_' . $entity->bundle;
  $vars['theme_hook_suggestions'][] = $template;

  // Theme
  if ($settings['theme']['display'] != 'none') {
    $template .= '_' . $settings['theme']['display'];
    $vars['theme_hook_suggestions'][] = $template;
    if ($settings['theme']['style'] != 'none') {
      $template .= '_' . $settings['theme']['style'];
      $vars['theme_hook_suggestions'][] = $template;
    }
  }
  if (!empty($settings['theme']['identity'])) {
    $template .= '__' . $settings['theme']['identity'];
    $vars['theme_hook_suggestions'][] = $template;
  }

  // CSS Classes
  // Settings: Use entity CSS class.
  if (!$settings['css']['entity_class']) {
    foreach ($vars['classes_array'] as $key => $css_class) {
      if ($css_class == 'fieldable-panels-pane') {
        unset($vars['classes_array'][$key]);
      }
    }
  }
  // Settings: Use bundle CSS class.
  if ($settings['css']['bundle_class']) {
    $vars['classes_array'][] = $entity->bundle;
  }
  // Settings: Add custom CSS classes, in format: "abc def hello"
  if (!empty($settings['css']['classes'])) {
    $vars['classes_array'][] = check_plain($settings['css']['classes']);
  }
  // Predefined classes
  if (isset($settings['css']['classes_predefined']) && $settings['css']['classes_predefined']['used']) {
    $vars['classes_array'][] = implode(' ', array_filter($settings['css']['classes_predefined']['used']));
  }
  // Style
  if (!empty($settings['css']['style'])) {
    $vars['attributes_array']['style'][] = $settings['css']['style'];
  }

  // Title
  if ($settings['display']['title']) {
    $vars['title'] = $entity->title;
    if ($entity->link) {
      $vars['title'] = l($vars['title'], $entity->path);
    }
    $vars['tag'] = $settings['display']['title_tag'];
  }

  // Plugin Callback: 'template preprocess'
  $callback = kpane_plugin_get_function($entity->bundle, 'template preprocess');
  if ($callback) {
    $callback($vars, $entity);
  }
  // For other modules to extend
  $hook = 'kpane_' . $entity->bundle . 'template_preprocess';
  drupal_alter($hook, $vars, $entity);

  // Plugin Attach
  // Simple attach files, for complex attach, use 'template preprocess' to achieve
  kpane_plugin_attach($entity->bundle);

}

/**
 *  Implements hook_process_HOOK().
 */
function kpane_process_fieldable_panels_pane(&$vars) {
  //dsm($vars);
  $entity = $vars['elements']['#fieldable_panels_pane'];
  // Plugin Template Process
  $callback = kpane_plugin_get_function($entity->bundle, 'template process');
  if ($callback) {
    $callback($vars, $entity);
  }
  // For other modules to extend
  $hook = 'kpane_' . $entity->bundle . 'template_process';
  drupal_alter($hook, $vars, $entity);
}

/**
 * Implements hook_fieldable_panels_panes_entity_settings_form_alter().
 */
function kpane_fieldable_panels_panes_entity_settings_form_alter(&$form, &$form_state) {
  $entity = $form_state['entity'];
  $plugin = kpane_plugin_get_plugins($entity->bundle);

  // No revision by default.
  $form['revision']['revision']['#default_value'] = FALSE;

  // --- Global Settings --- //
  $form['kpane'] = array(
    '#type' => 'hidden',
    '#value' => $plugin['name'],
  );

  // Theme
  $form['settings']['theme'] = array(
    '#type' => 'fieldset',
    '#title' => t('Theme'),
    '#collapsible' => TRUE,
  );
  $form['settings']['theme']['display'] = array(
    '#type' => 'select',
    '#title' => t('Display'),
    '#options' => kpane_plugin_theme_display_options($plugin),
    '#default_value' => kpane_settings_global_default_value($entity, array('theme', 'display'), 'none'),
    '#ajax' => array(
      'callback' => 'kpane_plugin_settings_theme_display_ajax',
      'wrapper' => 'settings_theme_display_style',
    ),
  );
  // For ajax, while the ajax callback just pass in variables value, the state should set it correctly here for validation.
  $display = isset($form_state['values']['settings']['theme']['display']) ? $form_state['values']['settings']['theme']['display'] : kpane_settings_global_default_value($entity, array('theme', 'display'), 'none');
  $style = kpane_settings_global_default_value($entity, array('theme', 'style'), 'none');
  $form['settings']['theme']['style'] = array(
    '#type' => 'select',
    '#title' => t('Style'),
    '#options' => kpane_plugin_theme_style_options($plugin, $display),
    '#default_value' => $style,
    '#prefix' => '<div id="settings_theme_display_style">',
    '#suffix' => '</div>',
  );
  $identity = kpane_settings_global_default_value($entity, array('theme', 'identity'), '');
  $form['settings']['theme']['identity'] = array(
    '#type' => 'textfield',
    '#title' => t('Identity'),
    '#default_value' => $identity,
  );
  // Ajax show the theme_hook_suggestion template name for this kpane.
  // @todo Create a helper for this.
  $template = 'kpane-' . $plugin['name'];
  if ($display != 'none') {
    $template .= '-' . $display;
    if ($style != 'none') {
      $template .= '-' . $style;
    }
  }
  if (!empty($identity)) {
    $template .= '--' . $identity;
  }
  $form['settings']['theme']['theme_hook_suggestion'] = array(
    '#type' => 'item',
    '#title' => t('Template'),
    '#markup' => '<div id="kpane-theme-hook-suggestion">' . $template . '.tpl.php' . '</div>',
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'kpane') . '/js/kpane.js',
      ),
    )
  );

    // CSS
  $form['settings']['css'] = array(
    '#type' => 'fieldset',
    '#title' => t('CSS'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['settings']['css']['entity_class'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use entity CSS class'),
    '#default_value' => kpane_settings_global_default_value($entity, array('css', 'entity_class'), TRUE),
  );
  $form['settings']['css']['bundle_class'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use bundle CSS class'),
    '#default_value' => kpane_settings_global_default_value($entity, array('css', 'bundle_class'), TRUE),
  );
  $form['settings']['css']['classes'] = array(
    '#type' => 'textfield',
    '#title' => t('Add CSS classes'),
    '#default_value' => kpane_settings_global_default_value($entity, array('css', 'classes'), ''),
  );
  if ($plugin['classes']) {
    $form['settings']['css']['classes_predefined'] = array(
      '#type'        => 'fieldset',
      '#title'       => t('Choose predefined classes'),
      '#collapsible' => TRUE,
      '#collapsed'   => TRUE,
    );
    $form['settings']['css']['classes_predefined']['used'] = array(
      '#type'    => 'checkboxes',
      '#title'   => t('Predefined classes'),
      '#options' => $plugin['classes'],
      '#default_value' => kpane_settings_global_default_value($entity, array('css', 'classes_predefined', 'used'), array()),
    );
  }
  $form['settings']['css']['style'] = array(
    '#type' => 'textarea',
    '#title' => t('Element inline style'),
    '#default_value' => kpane_settings_global_default_value($entity, array('css', 'style'), ''),
  );

  // Display
  $form['settings']['display'] = array(
    '#type' => 'fieldset',
    '#title' => t('Display'),
    '#collapsible' => TRUE,
  );
  $form['settings']['display']['title'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show title'),
    '#default_value' => kpane_settings_global_default_value($entity, array('display', 'title'), TRUE),
  );
  kore_include('heading');
  $form['settings']['display']['title_tag'] = array(
    '#type' => 'select',
    '#title' => t('Title tag'),
    '#options' => kore_heading_tag_options(),
    '#default_value' => kpane_settings_global_default_value($entity, array('display', 'title_tag'), 'h2'),
  );

  // --- Plugin Settings --- //
  $id = $entity->bundle;
  $callback = kpane_plugin_get_function($id, 'settings form');
  if ($callback) {
    $form['settings'][$id] = array(
      '#type' => 'fieldset',
      '#title' => t('@id Settings', array('@id' => $id)),
      '#collapsible' => TRUE,
    );
    $form['settings'][$id] += $callback($form, $form_state, $entity);
  }

  // Provide hook for others to alter this form.
  drupal_alter('kpane_' . $id . 'settings_form', $form, $form_state);
  drupal_alter('kpane_settings_form', $form, $form_state);
}

// =============================================================================
// Callbacks, Helpers, Utility

/**
 * For menu: 'admin/structure/fieldable-panels-panes/manage/%/reset'.
 */
function kpane_plugin_reset_form($form, &$form_state, $kpane_bundle) {
  $question = t('Are you sure to reset he @kpane_bundle.', array('@kpane_bundle' => $kpane_bundle));
  $path = 'admin/structure/fieldable-panels-panes/manage/' . $kpane_bundle;
  $form_state['kpane_bundle'] = $kpane_bundle;

  return confirm_form($form, $question, $path);
}

function kpane_plugin_reset_form_submit($form, &$form_state) {
  $kpane_bundle = $form_state['kpane_bundle'];
  if ($form_state['values']['confirm']) {
    $callback = kpane_plugin_get_function($kpane_bundle, 'reset');
    if ($callback) {
      $callback();
      drupal_set_message(t('@kpane_bundle is reset.', array('@kpane_bundle' => $kpane_bundle)));
    }
    else {
      drupal_set_message(t('Reset callback for @kpane_bundle does not exist.', array('@kpane_bundle' => $kpane_bundle)), 'warning');
    }
  }
  $form_state['redirect'] = 'admin/structure/fieldable-panels-panes/manage/' . $kpane_bundle;
}

// -----------------------------------------------------------------------------
// Helper

// Helper function to simplify default value setting in array.
function kpane_settings_default_value($entity, $param, $default_value, $plugin = TRUE) {
  if ($plugin) {
    $var = &$entity->settings[$entity->bundle];
  }
  else {
    $var = &$entity->settings;
  }
  if (is_array($param)) {
    foreach ($param as $child) {
      $var = &$var[$child];
    }
  }
  else {
    $var = &$var[$param];
  }

  return isset($var) ? $var : $default_value;
}

function kpane_settings_global_default_value($entity, $param, $default_value) {
  return kpane_settings_default_value($entity, $param, $default_value, FALSE);
}
